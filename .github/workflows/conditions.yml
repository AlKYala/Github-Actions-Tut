name: Conditions
on:
  push:
    branches:
      - 'master'
      - 'feature/**'
    paths: #uebereinstimmung ordner / dateiname
      - '**.java'
      - '**.yml'
      - '**.properties'
    tags: #Tagname muss uebereinstimmen
      - '**.**'
  pull_request:
    types: [opened, closed, synchronized, reopened, unlocked, edited]
    branches:
      - 'master'
      - 'develop**'
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
env:
  de.ayalama.variable.to.override: 'workflow-level'
jobs:
  first-job:
    runs-on: ubuntu-latest
    steps:
      - name: Context-Info
        id: echo-step
        run: echo "{{toJSON(github)}}"
      - name: Conditional Step
        if: steps.first-job.echo-step.outcome != 'success' || steps.first-job.echo-step.outcome != 'skipped'
        run: echo "$steps.fist-job.echo-step.id" success, run this stuff
  test-job:
    env:
      de.ayalama.variable.to.override: 'job-level'
    runs-on: ubuntu-latest
    outputs:
      my-log-file-output: ${{steps.output_file.outputs.my-log-file}}
    steps:
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          # cache: 'maven' #Alternativ auch so Cachebar - ist aber ein feauture von actionsS/setup-java
      - name: Test with Maven
        id: maven_test
        run: mvn -B test
      - name: Output file
        id: output_file
        run: find logs/*.log -type f -execdir echo 'my-log-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload Artifacts - Save Logs
        uses: actions/upload-artifact@v3
        with:
          name: 'logfiles'
          path: './logs/actions.log'
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: 'logfiles' #muss namentlich gleich sein wie der upload with:name
  read-output-job:
    runs-on: ubuntu-latest
    needs: test-job
    steps:
      - name: Auslesen von Output
        run: echo "${{needs.test-job.outputs.my-log-file-output}}"
  read-secret-variable:
    environment: foo-env
    runs-on: ubuntu-latest
    steps:
      - name: Secret Varaible Auslesen
        run: echo "${{secrets.SECRET_TEST}}"
      - name: Secret Varaible aus Environment auslesen
        run: echo "${{secrets.SECRET_IN_ENV}}"