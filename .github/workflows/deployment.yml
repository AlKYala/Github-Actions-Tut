name: Deployment Workflow
on:
  push:
    branches:
      - 'master'
      - 'feature/**'
    paths: #uebereinstimmung ordner / dateiname
      - '**.java'
      - '**.yml'
      - '**.properties'
    tags: #Tagname muss uebereinstimmen
      - '**.**'
  pull_request:
    types: [opened, closed, synchronized, reopened, unlocked, edited]
    branches:
      - 'master'
      - 'develop**'
  workflow_dispatch:
jobs:
  deploy-mongo-db:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repo
        uses: actions/checkout@v3
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Deploy MongoDB App'
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/mongo #es wird nichts vor ort gebaut - du kannst direkt drauf zugreifen
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: mongodb
          group-name: deploymentgroup
          location: 'germanywestcentral'
          ports: '27017:27017'
  test-and-build-and-deploy-jar:
    needs: deploy-mongo-db
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repo
        uses: actions/checkout@v3
      - name: Setup Java so you can Test and Build later
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Test with Maven
        id: maven_test
        run: mvn -B test
      - name: Build
        id: maven_build
        run: mvn clean install -P local #local als Profil. Muss noch geaendert werden
      - name: Find target folder
        run: |
          cd target
          ls -a
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Build and push image' #es wird im runbefehl der sha-hash mitgegeben. Damit k√∂nnen wir das image eindeutig identifizieren
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/github-actions-tut:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/github-actions-tut:${{ github.sha }}
      - name: 'Deploy Java App'
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/github-actions-tut:${{ github.sha }} # nimm das eindeutig identifizierbare image
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: github-actions-tut
          group-name: deploymentgroup
          location: 'germanywestcentral'
          ports: '8080:8080'