name: Conditions und continue-on-error
on:
  push:
    branches:
      - 'master'
      - 'feature/**'
    paths: #uebereinstimmung ordner / dateiname
      - '**.java'
      - '**.yml'
      - '**.properties'
    tags: #Tagname muss uebereinstimmen
      - '**.**'
  pull_request:
    types: [opened, closed, synchronized, reopened, unlocked, edited]
    branches:
      - 'master'
      - 'develop**'
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
env:
  de.ayalama.variable.to.override: 'workflow-level'
jobs:
  first-job:
    runs-on: ubuntu-latest
    steps:
      - name: Context-Info
        id: echo-step
        run: echo "{{toJSON(github)}}"
      - name: Conditional Step
        if: success()
        run: echo "success, run this stuff"
  test-job:
    # continue-on-error: true #falls einige kombinationen fehlschlagen
    strategy:
      matrix: #n-dimensional - kreuzprodukt fuer jede kombiation
        java-versions: ['17','19']
        osArr: [ubuntu-latest, ubuntu-20.04]
        # include: # kombinationen einschliessen die nicht zum kreuzprodukt dazugehoeren sollen
          # - java-versions: '11' # gehoert nicht zum kreuzprodukt
          #  osArr: ubuntu-22.04 #gehoert nicht zum kreuzprodukt
        exclude: # aus dem Kreuzprodukt kombinationen entfernen
          - java-versions: '17' # do not run 17 with ubuntu-20.04
            osArr: ubuntu-20.04
    env:
      de.ayalama.variable.to.override: 'job-level'
    runs-on: ${{matrix.osArr}}
    outputs:
      my-log-file-output: ${{steps.output_file.outputs.my-log-file}}
    steps:
      - name: hol dir Actions
        continue-on-error: true
        uses: actions/checkout@v3
      - name: Set up JDK 17
        id: jdk_setup_and_cache
        uses: actions/setup-java@v3
        with:
          java-version: ${{matrix.java-versions}}
          distribution: 'adopt'
          cache: 'maven' #Alternativ auch so Cachebar - ist aber ein feauture von actionsS/setup-java
      - name: Test with Maven
        id: maven_test
        run: mvn -B test
      - name: Output file
        id: output_file
        run: find logs/*.log -type f -execdir echo 'my-log-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload Artifacts - Save Logs
        uses: actions/upload-artifact@v3
        with:
          name: 'logfiles'
          path: './logs/actions.log'
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: 'logfiles' #muss namentlich gleich sein wie der upload with:name
      - name: Check if JDK Cache hit
        if: steps.jdk_setup_and_cache.outputs.cache-hit == 'true' #cache-hit gives us string
        run: echo "JDK wurde gecached"
  read-output-job:
    runs-on: ubuntu-latest
    needs: test-job
    steps:
      - name: Auslesen von Output
        run: echo "${{needs.test-job.outputs.my-log-file-output}}"
  read-secret-variable:
    environment: foo-env
    runs-on: ubuntu-latest
    steps:
      - name: Secret Varaible Auslesen
        run: echo "${{secrets.SECRET_TEST}}"
      - name: Secret Varaible aus Environment auslesen
        run: echo "${{secrets.SECRET_IN_ENV}}"
  job-to-test-conditions:
    runs-on: ubuntu-latest
    needs:
      - test-job
    name: another-job-condition
    if: cancelled()
    steps:
      - name: echostep
        run: echo "success, run this stuff"



